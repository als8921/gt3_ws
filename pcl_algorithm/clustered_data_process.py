clustered_data = [[2.562795, -0.329822, 1.323975], [2.530391, -0.415623, 1.321355], [2.531801, -0.464508, 1.322949], [2.533208, -0.513329, 1.324539], [2.866425, 1.245096, 1.257631], [2.86213, 1.170172, 1.259467], [2.820353, 1.067162, 1.258137], [2.815908, 0.9952, 1.259894], [2.800814, 0.916894, 1.260707], [2.783695, 0.839208, 1.26129], [2.682726, 0.418759, 1.263586], [2.675704, 0.358699, 1.264703], [2.66863, 0.299732, 1.265772], [2.648661, 0.239646, 1.26547], [2.638487, 0.18301, 1.266111], [2.633215, 0.128018, 1.267222], [2.611989, 0.073333, 1.266587], [2.610599, 0.02051, 1.26803], [2.593203, -0.030966, 1.267691], [2.584737, -0.081658, 1.268286], [2.578235, -0.131747, 1.269066], [2.561636, -0.17909, 1.268665], [2.545966, -0.225049, 1.268317], [2.539319, -0.272142, 1.268975], [2.524532, -0.315778, 1.268648], [2.507642, -0.357157, 1.268025], [2.497793, -0.399915, 1.268207], [2.488911, -0.442093, 1.26848], [2.491227, -0.489125, 1.270112], [2.506865, -0.543685, 1.273413], [2.518449, -0.596889, 1.276245], [2.536244, -0.654864, 1.279899], [2.828257, 1.201852, 1.188227], [2.818964, 1.125426, 1.190198], [2.788339, 1.03389, 1.191405], [2.777915, 0.959893, 1.193286], [2.763539, 0.884596, 1.194992], [2.741284, 0.806284, 1.196336], [2.734528, 0.739171, 1.198264], [2.714994, 0.666682, 1.199597], [2.706139, 0.601438, 1.201341], [2.698204, 0.537899, 1.203081], [2.677396, 0.470989, 1.204134], [2.665363, 0.409272, 1.205539], [2.644342, 0.346794, 1.206399], [2.640081, 0.290329, 1.208072], [2.619867, 0.231978, 1.208804], [2.611512, 0.1773, 1.210123], [2.602108, 0.123629, 1.211322], [2.585639, 0.070902, 1.212032], [2.584147, 0.019643, 1.213595], [2.573586, -0.030703, 1.214549], [2.559946, -0.079583, 1.215248], [2.548263, -0.127393, 1.216015], [2.534497, -0.173611, 1.21659], [2.53285, -0.221488, 1.217951], [2.517963, -0.265249, 1.21836], [2.506064, -0.308585, 1.218936], [2.488236, -0.394278, 1.220427], [2.483358, -0.437628, 1.221445], [2.474329, -0.478202, 1.222133], [2.46834, -0.519457, 1.223044], [2.466445, -0.5624, 1.224277], [2.470739, -0.608898, 1.226021], [2.827212, 1.190925, 1.122877], [2.808084, 1.107295, 1.125577], [2.788855, 1.025607, 1.128254], [2.777331, 0.951407, 1.130816], [2.753014, 0.870278, 1.133477], [2.740335, 0.798856, 1.135986], [2.72266, 0.726296, 1.138481], [2.711781, 0.659281, 1.140887], [2.69589, 0.591499, 1.143248], [2.684856, 0.527668, 1.145533], [2.672758, 0.464979, 1.147748], [2.65959, 0.403569, 1.149881], [2.64435, 0.343307, 1.151917], [2.633023, 0.285719, 1.153889], [2.617623, 0.228895, 1.15574], [2.606157, 0.174312, 1.15754], [2.593623, 0.121014, 1.159245], [2.588083, 0.069314, 1.160969], [2.576449, 0.018466, 1.162537], [2.564756, -0.031126, 1.16403], [2.550977, -0.079265, 1.165412], [2.540186, -0.126492, 1.166785], [2.532403, -0.173244, 1.168168], [2.522539, -0.218684, 1.169458], [2.513652, -0.263434, 1.170728], [2.496507, -0.304502, 1.171745], [2.484424, -0.345867, 1.17285], [2.473312, -0.386441, 1.17395], [2.468342, -0.428778, 1.175214], [2.462303, -0.469934, 1.176441], [2.462452, -0.513807, 1.177874], [2.454258, -0.55237, 1.179032], [2.452265, -0.59393, 1.180413], [2.844565, 1.195673, 1.057373], [2.833125, 1.117969, 1.060667], [2.820637, 1.040716, 1.064042], [2.799226, 0.958672, 1.067939], [2.789522, 0.886523, 1.071138], [2.761973, 0.805014, 1.075292], [2.755067, 0.737822, 1.07828], [2.724289, 0.659853, 1.082434], [2.713242, 0.594132, 1.085511], [2.696142, 0.5275, 1.088801], [2.685939, 0.465376, 1.091691], [2.669662, 0.402818, 1.094757], [2.656307, 0.342971, 1.0976], [2.651931, 0.286656, 1.100002], [2.63139, 0.228488, 1.102919], [2.620852, 0.173725, 1.105365], [2.606207, 0.119941, 1.107854], [2.594535, 0.067832, 1.110147], [2.577719, 0.01712, 1.112501], [2.57204, -0.032618, 1.114445], [2.56429, -0.081455, 1.116383], [2.548309, -0.128167, 1.118458], [2.538415, -0.17456, 1.120313], [2.5223, -0.218427, 1.122246], [2.520548, -0.264956, 1.123825], [2.507415, -0.307397, 1.125598], [2.495253, -0.348928, 1.127312], [2.485106, -0.390106, 1.128962], [2.474902, -0.430202, 1.130594], [2.472983, -0.473475, 1.132108], [2.465812, -0.513411, 1.133697], [2.45859, -0.552415, 1.135291], [2.453414, -0.591801, 1.136876], [2.8557, 1.057966, 0.997349], [2.840113, 0.978871, 1.001848], [2.84428, 0.914144, 1.004312], [2.817612, 0.831117, 1.009933], [2.808744, 0.76066, 1.013717], [2.782825, 0.683071, 1.019111], [2.755765, 0.607903, 1.024494], [2.758674, 0.54762, 1.026993], [2.739444, 0.479805, 1.031456], [2.726159, 0.416041, 1.035276], [2.704714, 0.351886, 1.039685], [2.697339, 0.293046, 1.042778], [2.674693, 0.232813, 1.047022], [2.666181, 0.176625, 1.049992], [2.640289, 0.120327, 1.054214], [2.635736, 0.067146, 1.05666], [2.61887, 0.01488, 1.05994], [2.608085, -0.036078, 1.062666], [2.59725, -0.085896, 1.065306], [2.579148, -0.133458, 1.068367], [2.567164, -0.180519, 1.070919], [2.556162, -0.226646, 1.073337], [2.550298, -0.273192, 1.075369], [2.529836, -0.3142, 1.078289], [2.512405, -0.354427, 1.080957], [2.504294, -0.396937, 1.08302], [2.491944, -0.436576, 1.085321], [2.487923, -0.479207, 1.087133], [2.484918, -0.521815, 1.088906], [2.465007, -0.553727, 1.091611], [2.452382, -0.588291, 1.09391], [2.629003, -0.141804, 1.013904], [2.626387, -0.192692, 1.016092], [2.601262, -0.287628, 1.022508], [2.582849, -0.331287, 1.026256], [2.567494, -0.374351, 1.029622], [2.547852, -0.414092, 1.033393], [2.537599, -0.456322, 1.036164], [2.532566, -0.500112, 1.038405], [2.508428, -0.532609, 1.042557], [2.473547, -0.556302, 1.047715], [2.467208, -0.594974, 1.050075], [2.616666, -0.491532, 0.978729], [2.556436, -0.510284, 0.989349], [2.518303, -0.53578, 0.996668], [2.483183, -0.559501, 1.003479], [2.463942, -0.590038, 1.008017], [2.647539, -0.504107, 0.924157], [2.564471, -0.512334, 0.94177], [2.515345, -0.531848, 0.952866], [2.484256, -0.557576, 0.960538], [2.462703, -0.586411, 0.966425], [2.634643, -0.496308, 0.877659], [2.569288, -0.512719, 0.894826], [2.519818, -0.531998, 0.908196], [2.488502, -0.557512, 0.917353], [2.467867, -0.586832, 0.924066], [2.577325, -0.51469, 0.8472], [2.522085, -0.530903, 0.864318], [2.493802, -0.558028, 0.874098], [2.470827, -0.585819, 0.882418], [2.584277, -0.516053, 0.799853], [2.5385, -0.537463, 0.816466], [2.500172, -0.559116, 0.830652], [2.474831, -0.585422, 0.840772]]
clustered_idx = [546, 548, 549, 550, 564, 565, 566, 567, 568, 569, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 850, 851, 852, 853, 854, 893, 894, 895, 896, 897, 936, 937, 938, 939, 940, 980, 981, 982, 983, 1023, 1024, 1025, 1026]

import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import open3d as o3d
from sklearn.decomposition import PCA


points = np.array(clustered_data)
pcd = o3d.geometry.PointCloud()
pcd.points = o3d.utility.Vector3dVector(points)

# 노멀 벡터 계산
pcd.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius=0.1, max_nn=30))
# 노멀 벡터 가져오기
normals = np.asarray(pcd.normals)

# 데이터 분리
x, y, z = np.transpose(clustered_data)

def plot3D():
    radius = 0.15
    fig = plt.figure(figsize=(16, 16))
    ax = fig.add_subplot(111, projection='3d')

    max_z = z.max()
    mask = (z >= max_z - radius * 2)
    
    center_points = []
    for i in range(len(points)):
        if mask[i]:  # mask가 True인 경우에만 처리
            new_x = x[i] + normals[i, 0] * radius
            new_y = y[i] + normals[i, 1] * radius
            new_z = z[i] + normals[i, 2] * radius
            center_points.append([new_x, new_y, new_z])


    # z값이 높은 포인트와 나머지 포인트를 다른 색으로 시각화
    ax.scatter(x[mask], y[mask], z[mask], color='red', marker='o', label='High Z Points')  # z값이 높은 포인트
    ax.scatter(x[~mask], y[~mask], z[~mask], color=[0, 0.5, 0.6], marker='o', label='Other Points')  # 나머지 포인트

    # center_points가 비어 있지 않은 경우 PCA를 사용하여 직선 찾기
    if center_points:
        center_points = np.array(center_points)
        
        pca = PCA(n_components=1) # PCA를 적용하여 최적의 직선 찾기
        pca.fit(center_points)
        line_direction = pca.components_[0] # PCA에서 얻은 주성분 벡터

        mean_point = center_points.mean(axis=0)
        t = np.linspace(-1, 1, 20)
        line_points = mean_point + (line_direction * t[:, np.newaxis] * np.linalg.norm(center_points - mean_point, axis=1).max())

        # 직선 그리기

        # 원통 시각화: 원통의 원 그리기
        num_circle_points = 100
        circle_radius = 0.15
        theta = np.linspace(0, 2 * np.pi, num_circle_points)

        for point in line_points:
            # 직선 방향 벡터를 기준으로 수직 벡터 계산
            if np.all(line_direction == 0):
                vertical_vector = np.array([0, 0, 1])  # 기본 방향을 Z축으로 설정
            else:
                # 직선 방향 벡터와 수직인 벡터 계산
                vertical_vector = np.cross(line_direction, np.array([1, 0, 0]))
                if np.linalg.norm(vertical_vector) < 1e-6:  # 수직 벡터가 0일 경우
                    vertical_vector = np.cross(line_direction, np.array([0, 1, 0]))

            # 수직 벡터 정규화
            vertical_vector /= np.linalg.norm(vertical_vector)

            # 원의 점 계산
            x_circle = point[0] + circle_radius * (np.cos(theta) * vertical_vector[0] + np.sin(theta) * np.cross(line_direction, vertical_vector)[0])
            y_circle = point[1] + circle_radius * (np.cos(theta) * vertical_vector[1] + np.sin(theta) * np.cross(line_direction, vertical_vector)[1])
            z_circle = point[2] + circle_radius * (np.cos(theta) * vertical_vector[2] + np.sin(theta) * np.cross(line_direction, vertical_vector)[2])

            ax.plot(x_circle, y_circle, z_circle, color='gray', alpha=0.5)

        ax.plot(line_points[:, 0], line_points[:, 1], line_points[:, 2], color='blue', linewidth=2)
        ax.scatter(center_points.transpose()[0],center_points.transpose()[1], center_points.transpose()[2], color=[0, 0, 1, 0.5], marker='o', s = 10)


    # 축 레이블
    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Z')

    # 축 스케일을 동일하게 설정
    max_range = np.array([x.max() - x.min(), y.max() - y.min(), z.max() - z.min()]).max() / 2.0

    # 중심점 설정
    mid_x = (x.max() + x.min()) * 0.5
    mid_y = (y.max() + y.min()) * 0.5
    mid_z = (z.max() + z.min()) * 0.5

    # 축 범위 설정
    ax.set_xlim(mid_x - max_range, mid_x + max_range)
    ax.set_ylim(mid_y - max_range, mid_y + max_range)
    ax.set_zlim(mid_z - max_range, mid_z + max_range)

    # 범례 추가
    ax.legend()
    
    plt.show()


def plot2D():
    width, height = 43, 24
    image = np.ones((height, width, 3))

    for index in clustered_idx:
        y = index // width
        x = index % width
        if 0 <= y < height and 0 <= x < width:
            image[y, x] = [0, 0, 0]

    fig = plt.figure(figsize=(16, 16))
    ax2D = fig.add_subplot(111)
    ax2D.imshow(image)
    ax2D.axis([0, 43, 0, 23])
    ax2D.invert_yaxis()
    plt.show()


plot3D()
